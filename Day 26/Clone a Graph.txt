Leetcode link: https://leetcode.com/problems/clone-graph/

/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    Node* dfs(Node* node, vector<Node*> &vis){
        Node* temp = new Node(node->val);
        vis[node->val - 1] = temp;
        vector<Node*> n;
        for(auto i: node->neighbors){
            if(vis[i->val - 1]!=NULL){
                n.push_back(vis[i->val - 1]);
            }
            else{
                n.push_back(dfs(i, vis));
            }
        }
        temp->neighbors = n;
        return temp;
    }
    Node* cloneGraph(Node* node) {
        if(node==NULL){
            return NULL;
        }
        if(node->neighbors.size() == 0){
            Node* temp = new Node(node->val);
            return temp;
        }
        int n = node->neighbors.size();
        vector<Node*> vis(101, NULL);
        unordered_map<Node*, Node*> umap;
        return dfs(node, vis);
    }
};