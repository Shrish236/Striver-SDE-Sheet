Leetcode link: https://leetcode.com/problems/add-two-numbers/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int carry = 0, sum = 0;
        ListNode* temp = l2, *prev = NULL;
        while(l1!=NULL && l2!=NULL){
            sum = l1->val + l2->val + carry;
            if(sum>=10){
                carry = sum/10;
                sum = sum%10;
            }
            else{
                carry = 0;
            }
            prev = l2;
            l2->val = sum;
            l2 = l2->next;
            l1 = l1->next;
        }
        if(carry!=0){
            if(l1==NULL){
                if(l2==NULL){
                    ListNode* newNode = new ListNode(carry);
                    prev->next = newNode;
                }
                else{
                    while(l2!=NULL && carry!=0){
                        sum = l2->val + carry;
                        if(sum>=10){
                            carry = sum/10;
                            sum = sum%10;
                        }
                        else{
                            carry = 0;
                        }
                        prev = l2;
                        l2->val=sum;
                        l2=l2->next;
                    }
                    if(l2==NULL && carry!=0){
                        ListNode* newNode = new ListNode(carry);
                        prev->next = newNode;
                    }
                }
            }
            else{
                ListNode* curr = l1, *l1_prev = NULL;
                while(l1!=NULL && carry!=0){
                    sum = l1->val + carry;
                    if(sum>=10){
                        carry = sum/10;
                        sum = sum%10;
                    }
                    else{
                        carry = 0;
                    }
                    l1_prev = l1;
                    l1->val=sum;
                    l1=l1->next;
                }
                if(l1==NULL && carry!=0){
                    ListNode* newNode = new ListNode(carry);
                    l1_prev->next = newNode;
                }
                prev->next = curr;
            }
        }
        else{
            if(l1!=NULL){
                prev->next = l1;
            }
        }
        return temp;
        
    }
};