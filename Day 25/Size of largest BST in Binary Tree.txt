Leetcode link: https://leetcode.com/problems/maximum-sum-bst-in-binary-tree/

Referred solution: https://leetcode.com/problems/maximum-sum-bst-in-binary-tree/discuss/1245609/C%2B%2B-or-Simple-%2B-Clean-Code

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int findMax(TreeNode* root, int &maxi, int &mini, int &ans){
        if(root==NULL){
            return 0;
        }
        int leftMax = INT_MIN, leftMin = INT_MAX;
        int rightMax = INT_MIN, rightMin = INT_MAX;
        
        int left = findMax(root->left, leftMax, leftMin, ans);
        int right = findMax(root->right, rightMax, rightMin, ans);
        
        int val = root->val + left + right;
        
        if((root->val > leftMax) && (root->val < rightMin)){
            ans = max(ans, val);
            maxi = max(root->val, rightMax);
            mini = min(root->val, leftMin);
        }
        else{
            maxi = INT_MAX;
            mini = INT_MIN;
        }
        return val;
        
        
    }
    int maxSumBST(TreeNode* root) {
        int ans = 0, maxi = INT_MIN, mini = INT_MAX;
        int res = findMax(root, maxi, mini, ans);
        return ans;
    }
};