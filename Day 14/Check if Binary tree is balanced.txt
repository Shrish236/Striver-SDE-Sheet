Leetcode link: https://leetcode.com/problems/balanced-binary-tree/

Referred solution: https://leetcode.com/problems/balanced-binary-tree/discuss/35691/The-bottom-up-O(N)-solution-would-be-better

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxLevel(TreeNode* root){
        if(root==NULL){
            return 0;
        }
        int left = maxLevel(root->left);
        int right = maxLevel(root->right);
        return max(left, right) + 1;
        
    }
    bool check(TreeNode* root){
        if(root==NULL){
            return true;
        }
        int left = maxLevel(root->left);
        int right = maxLevel(root->right);
        bool val = false;
        if(abs(right-left)<=1){
            val = true;
        }
        return (val && check(root->left)) && check(root->right);
        
    }
    bool isBalanced(TreeNode* root) {
        if(root==NULL){
            return true;
        }
        return check(root);
    }
};