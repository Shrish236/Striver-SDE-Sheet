Leetcode link: https://leetcode.com/problems/find-the-duplicate-number/

Referred solution: https://leetcode.com/problems/find-the-duplicate-number/discuss/1892921/9-Approaches%3A-Count-Hash-In-place-Marked-Sort-Binary-Search-Bit-Mask-Fast-Slow-Pointers

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int n = nums.size();
        int count = 0;
        int low = 1;
        int high = n-1;
        while(low<high){
            int mid = low + (high - low)/2;
            count = 0;
            for(int i = 0; i<n; i++){
                if(nums[i]<=mid){
                    count++;
                }
            }
            if(count <= mid){
                low = mid+1;
            }
            else{
                high = mid;
            }
        }
        return low;
    }
};