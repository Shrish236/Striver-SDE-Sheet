Leetcode link: https://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* populate(int index, int end, vector<int> &nums){
        if(index == -1){
            return NULL;
        }
       TreeNode* temp = new TreeNode();
        temp->val = nums[index];
        int left = -1, right = -1;
        for(int i = index+1; i<end; i++){
            if(left==-1 && nums[i] < temp->val){
                left = i;
            }
            if(right==-1 && nums[i] > temp->val){
                right = i;
            }
            if(left!=-1 && right!=-1){
                break;
            }
        }
        if(right==-1){
            temp->left = populate(left, end, nums);
        }
        else{
            temp->left = populate(left, right, nums);
        }
        temp->right = populate(right, end, nums);
        return temp;
    }
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        return populate(0, preorder.size(), preorder);
    }
};