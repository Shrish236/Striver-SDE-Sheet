Leetcode link: https://leetcode.com/problems/number-of-islands/

class Solution {
public:
    void bfs(int i, int j, vector<vector<char>> &grid, vector<vector<int>> &vis){
        vis[i][j] = 1;        
        int delrow[4] = {-1, 0, 1, 0};
        int delcol[4] = {0, 1, 0, -1};
        queue<pair<int, int>> q;
        q.push({i, j});
        while(!q.empty()){
            int row = q.front().first;
            int col = q.front().second;
            q.pop();
            for(int x = 0; x<4; x++){
                int tempRow = row + delrow[x];
                int tempCol = col + delcol[x];
                if(tempRow >= 0 && tempRow < grid.size() && tempCol >= 0 && tempCol < grid[0].size() && vis[tempRow][tempCol] == 0 && grid[tempRow][tempCol] == '1'){
                    vis[tempRow][tempCol] = 1;
                    q.push({tempRow, tempCol});
                }
            }
        }
        
    }
    int numIslands(vector<vector<char>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> vis(m, vector<int>(n, 0));
        int count = 0;
        for(int i = 0; i<m; i++){
            for(int j = 0; j<n; j++){
                if(vis[i][j]==0 && grid[i][j] == '1'){
                    bfs(i, j, grid, vis);
                    count++;
                }
            }
        }
        return count;
    }
};