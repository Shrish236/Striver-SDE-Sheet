Leetcode link: https://leetcode.com/problems/maximum-width-of-binary-tree/

Referred Striver's solution: https://www.youtube.com/watch?v=ZbybYvcVLks

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    int widthOfBinaryTree(TreeNode* root) {
        queue<pair<TreeNode*, long long>> q;
        q.push({root, 0});
        int first = 0, last = 0, max_width = 0;
        while(!q.empty()){
            int n = q.size();
            int minInd = q.front().second;
            for(int i = 0; i<n; i++){
                TreeNode* temp = q.front().first;
                long long index = q.front().second - minInd;
                q.pop();
                if(i==0){
                    first = index;
                }
                if(i==n-1){
                    last = index;
                }
                if(temp->left!=NULL){
                    q.push({temp->left, 2*index + 1});
                }
                if(temp->right!=NULL){
                    q.push({temp->right, 2*index + 2});
                }
            }
            max_width = max(max_width, last-first+1);
        }
        return max_width;
        
    }
};