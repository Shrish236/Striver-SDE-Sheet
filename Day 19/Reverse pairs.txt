Leetcode link: https://leetcode.com/problems/reverse-pairs/

Referred Striver's solution: https://takeuforward.org/data-structure/count-reverse-pairs/

class Solution {
public:
    int merge(vector<int> &array, int const left, int const mid,
           int const right)
{
    int count = 0;
    int start = left;
    int n = mid;
    int high = right;
    int x = mid+1;
    while(start <= n){
        while(x<=high && array[start]> (long long) 2*array[x]){
            x++;
        }
        count+= x-mid-1;
        start++;
    }
    int const subArrayOne = mid - left + 1;
    int const subArrayTwo = right - mid;
 
    // Create temp arrays
    auto *leftArray = new int[subArrayOne],
         *rightArray = new int[subArrayTwo];
 
    // Copy data to temp arrays leftArray[] and rightArray[]
    for (auto i = 0; i < subArrayOne; i++)
        leftArray[i] = array[left + i];
    for (auto j = 0; j < subArrayTwo; j++)
        rightArray[j] = array[mid + 1 + j];
 
    auto indexOfSubArrayOne = 0, indexOfSubArrayTwo = 0;
    int indexOfMergedArray = left;
 
    // Merge the temp arrays back into array[left..right]
    while (indexOfSubArrayOne < subArrayOne
           && indexOfSubArrayTwo < subArrayTwo) {
        if (leftArray[indexOfSubArrayOne]
            <= rightArray[indexOfSubArrayTwo]) {
            array[indexOfMergedArray]
                = leftArray[indexOfSubArrayOne];
            indexOfSubArrayOne++;
        }
        else {
            array[indexOfMergedArray]
                = rightArray[indexOfSubArrayTwo];
            indexOfSubArrayTwo++;
        }
        indexOfMergedArray++;
    }
 
    // Copy the remaining elements of
    // left[], if there are any
    while (indexOfSubArrayOne < subArrayOne) {
        array[indexOfMergedArray]
            = leftArray[indexOfSubArrayOne];
        indexOfSubArrayOne++;
        indexOfMergedArray++;
    }
 
    // Copy the remaining elements of
    // right[], if there are any
    while (indexOfSubArrayTwo < subArrayTwo) {
        array[indexOfMergedArray]
            = rightArray[indexOfSubArrayTwo];
        indexOfSubArrayTwo++;
        indexOfMergedArray++;
    }
    delete[] leftArray;
    delete[] rightArray;
    return count;
}
 
// begin is for left index and end is right index
// of the sub-array of arr to be sorted
int mergeSort(vector<int> &array, int const begin, int const end)
{
    int count = 0;
    if (begin >= end)
        return count;
 
    int mid = begin + (end - begin) / 2;
    count+=mergeSort(array, begin, mid);
    count+=mergeSort(array, mid + 1, end);
    count+=merge(array, begin, mid, end);
    return count;
}
    int reversePairs(vector<int>& nums) {
        return mergeSort(nums, 0, nums.size()-1);
    }
};